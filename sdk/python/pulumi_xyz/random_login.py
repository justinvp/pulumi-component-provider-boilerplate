# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RandomLoginArgs', 'RandomLogin']

@pulumi.input_type
class RandomLoginArgs:
    def __init__(__self__, *,
                 password_length: pulumi.Input[int],
                 pet_name: bool):
        """
        The set of arguments for constructing a RandomLogin resource.
        """
        pulumi.set(__self__, "password_length", password_length)
        pulumi.set(__self__, "pet_name", pet_name)

    @property
    @pulumi.getter(name="passwordLength")
    def password_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "password_length")

    @password_length.setter
    def password_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "password_length", value)

    @property
    @pulumi.getter(name="petName")
    def pet_name(self) -> bool:
        return pulumi.get(self, "pet_name")

    @pet_name.setter
    def pet_name(self, value: bool):
        pulumi.set(self, "pet_name", value)


class RandomLogin(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 password_length: Optional[pulumi.Input[int]] = None,
                 pet_name: Optional[bool] = None,
                 __props__=None):
        """
        Create a RandomLogin resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RandomLoginArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RandomLogin resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RandomLoginArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RandomLoginArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 password_length: Optional[pulumi.Input[int]] = None,
                 pet_name: Optional[bool] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RandomLoginArgs.__new__(RandomLoginArgs)

            if password_length is None and not opts.urn:
                raise TypeError("Missing required property 'password_length'")
            __props__.__dict__["password_length"] = password_length
            if pet_name is None and not opts.urn:
                raise TypeError("Missing required property 'pet_name'")
            __props__.__dict__["pet_name"] = pet_name
            __props__.__dict__["password"] = None
            __props__.__dict__["username"] = None
        super(RandomLogin, __self__).__init__(
            'xyz:index:RandomLogin',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordLength")
    def password_length(self) -> pulumi.Output[int]:
        return pulumi.get(self, "password_length")

    @property
    @pulumi.getter(name="petName")
    def pet_name(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "pet_name")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        return pulumi.get(self, "username")

